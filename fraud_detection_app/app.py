# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E2TWw4AKNYFUcnLjT-8ToDgvV1NDaX8u
"""

import streamlit as st
import numpy as np
import pandas as pd
import joblib
from datetime import datetime

# --- Set Page Config ---
st.set_page_config(page_title="Transaction Fraud Detection", layout="centered")

# --- Load Trained Models ---
try:
    model_bundle = joblib.load("model/fraud_detection.pkl")

    rf_model = model_bundle['random_forest']
    nb_model = model_bundle['naive_bayes']
    scaler_rf = model_bundle['scaler_rf']
    scaler_nb = model_bundle['scaler_nb']
    feature_columns_rf = model_bundle['feature_columns_rf']
    feature_columns_nb = model_bundle['feature_columns_nb']
except Exception as e:
    st.error("‚ùå Gagal memuat model.")
    st.exception(e)
    st.stop()

# --- Title ---
st.title("üîê Transaction Fraud Detection App")
st.markdown("Masukkan informasi transaksi untuk mendeteksi potensi penipuan.")

# --- Input Form ---
st.subheader("üìã Masukkan Data Transaksi")

age = st.number_input("Age", min_value=18, max_value=100, value=30)
sex = st.selectbox("Sex", ["M", "F"])
source = st.selectbox("Source", ["SEO", "Ads", "Direct"])
browser = st.selectbox("Browser", ["Chrome", "Safari", "Firefox", "IE"])
purchase_value = st.number_input("Purchase Value", min_value=0.0, value=50.0)

signup_time = st.time_input("Signup Time")
purchase_time = st.time_input("Purchase Time")

# --- Hitung selisih waktu dalam menit ---
time_diff = (datetime.combine(datetime.today(), purchase_time) -
             datetime.combine(datetime.today(), signup_time)).total_seconds() / 60.0
if time_diff < 0:
    time_diff += 24 * 60  # Lewati tengah malam

# --- Fungsi membuat DataFrame input ---
def build_input_df(age, sex, source, browser, purchase_value, time_diff, feature_columns):
    signup_hour = datetime.combine(datetime.today(), signup_time).hour

    # Buat value_group
    if purchase_value < 20:
        value_group = "low"
    elif purchase_value < 50:
        value_group = "medium"
    elif purchase_value < 100:
        value_group = "high"
    else:
        value_group = "very high"

    # Buat age_group
    if age <= 25:
        age_group = "18-25"
    elif age <= 35:
        age_group = "26-35"
    elif age <= 50:
        age_group = "36-50"
    else:
        age_group = "50+"

    # Buat signup_period
    if 0 <= signup_hour < 6:
        signup_period = "midnight"
    elif 6 <= signup_hour < 12:
        signup_period = "morning"
    elif 12 <= signup_hour < 18:
        signup_period = "afternoon"
    else:
        signup_period = "night"

    # Buat dataframe
    df = pd.DataFrame({
        'age': [age],
        'sex': [sex],
        'source': [source],
        'browser': [browser],
        'purchase_value': [purchase_value],
        'time_diff': [time_diff],
        'value_per_age': [purchase_value / (age + 1)],
        'signup_to_purchase_hour': [time_diff / 60],
        'value_group': [value_group],
        'age_group': [age_group],
        'signup_period': [signup_period]
    })

    # One-hot encoding
    categorical_cols = ['sex', 'source', 'browser', 'value_group', 'age_group', 'signup_period']
    df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

    # Lengkapi kolom agar sesuai
    for col in feature_columns:
        if col not in df.columns:
            df[col] = 0

    # Urutkan kolom
    df = df[feature_columns]
    return df

# --- Tombol Prediksi ---
if st.button("üîç Prediksi Fraud"):
    try:
        # Input untuk Random Forest
        input_rf = build_input_df(age, sex, source, browser, purchase_value, time_diff, feature_columns_rf)
        input_rf_scaled = scaler_rf.transform(input_rf)

        # Input untuk Naive Bayes
        input_nb = build_input_df(age, sex, source, browser, purchase_value, time_diff, feature_columns_nb)
        input_nb_scaled = scaler_nb.transform(input_nb)

        # Prediksi
        rf_pred = rf_model.predict(input_rf_scaled)[0]
        nb_pred = nb_model.predict(input_nb_scaled)[0]

        # Hasil prediksi
        st.markdown("---")
        st.success(f"üå≤ Random Forest Prediction: **{'‚ùó FRAUD' if rf_pred == 1 else '‚úÖ SAFE'}**")
        st.success(f"üß† Naive Bayes Prediction: **{'‚ùó FRAUD' if nb_pred == 1 else '‚úÖ SAFE'}**")

    except Exception as e:
        st.error("‚ùå Terjadi kesalahan saat prediksi.")
        st.exception(e)